[{"name": "app.py", "content": "import requests\nimport plotly.express as px\nimport pandas as pd\nfrom shiny.express import input, render, ui\nfrom shiny import reactive\nfrom shinywidgets import render_plotly\nimport datetime\nfrom collections import deque\nimport json\nfrom pathlib import Path\nimport time\nfrom shiny import express\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Configuration\nAPI_KEY = \"{api_weather_key}\"\nTEXAS_CITIES = [\n    \"Houston\", \"San Antonio\", \"Dallas\", \"Austin\", \"Fort Worth\",\n    \"El Paso\", \"Arlington\", \"Corpus Christi\", \"Plano\", \"Laredo\",\n    \"Lubbock\", \"Garland\", \"Irving\", \"Amarillo\", \"Grand Prairie\"\n]\nUNITS = \"metric\"\nMAX_HISTORY = 1000  # Increased to accommodate multiple cities\nHISTORY_FILE = \"weather_history.json\"\n\n# Metric labels for display\nMETRIC_LABELS = {\n    \"temperature\": \"Temperature (\u00b0C)\",\n    \"humidity\": \"Humidity (%)\",\n    \"pressure\": \"Pressure (hPa)\",\n    \"wind_speed\": \"Wind Speed (m/s)\"\n}\n\n# Function to fetch weather data for all Texas cities\ndef fetch_all_texas_weather():\n    weather_data = []\n    for city in TEXAS_CITIES:\n        url = f\"https://api.openweathermap.org/data/2.5/weather?q={city},TX,US&appid={API_KEY}&units={UNITS}\"\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            weather_data.append({\n                \"city\": city,\n                \"temperature\": data['main']['temp'],\n                \"humidity\": data['main']['humidity'],\n                \"pressure\": data['main']['pressure'],\n                \"wind_speed\": data['wind']['speed'],\n                \"weather_condition\": data['weather'][0]['main'],\n                \"timestamp\": datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            })\n        except (requests.RequestException, KeyError) as e:\n            print(f\"Error fetching weather for {city}: {e}\")\n    return weather_data\n\n# UI Setup\nui.page_opts(title=\"Texas Weather Dashboard - Femi\", fillable=True)\n\n# Sidebar\nwith express.ui.sidebar(open=\"open\"):\n    ui.h2(\"Texas Weather Controls\")\n    express.ui.input_selectize(\n        \"selected_city\",\n        \"Select City to Focus\",\n        choices=TEXAS_CITIES,\n        selected=\"Plano\"\n    )\n    express.ui.input_action_button(\"update_btn\", \"Refresh All Texas Cities\", class_=\"btn-primary\")\n    \n    ui.hr()\n    express.ui.input_selectize(\n        \"selected_metric\",\n        \"Select Metric to Visualize\",\n        choices=list(METRIC_LABELS.keys()),\n        selected=\"temperature\"\n    )\n    ui.input_numeric(\"history_hours\", \"History Hours\", 24, min=1, max=MAX_HISTORY)\n    ui.a(\"OpenWeatherMap API\", href=\"https://openweathermap.org/api\", target=\"_blank\")\n\n# Reactive data storage with file persistence\nweather_history = reactive.Value(deque(maxlen=MAX_HISTORY))\n\n# Load initial history from file or fetch initial data\n@reactive.Effect\ndef load_initial_history():\n    if Path(HISTORY_FILE).exists():\n        with open(HISTORY_FILE, \"r\") as f:\n            history = json.load(f)\n            weather_history.set(deque(history, maxlen=MAX_HISTORY))\n    else:\n        initial_data = fetch_all_texas_weather()\n        weather_history.set(deque(initial_data, maxlen=MAX_HISTORY))\n        with open(HISTORY_FILE, \"w\") as f:\n            json.dump(initial_data, f)\n\n# Reactive calculation for filtered history\n@reactive.calc\ndef filtered_history():\n    history = list(weather_history.get())\n    hours = input.history_hours()\n    return history[-hours:] if hours <= len(history) else history\n\n# Reactive effect for fetching and saving data for all cities\n@reactive.Effect\n@reactive.event(input.update_btn)\ndef update_weather():\n    new_data = fetch_all_texas_weather()\n    if new_data:\n        current_history = weather_history.get()\n        current_history.extend(new_data)  # Add all new data points\n        \n        with open(HISTORY_FILE, \"w\") as f:\n            json.dump(list(current_history), f)\n        \n        weather_history.set(current_history)\n\n# Reactive calculations for DataFrames\n@reactive.calc\ndef current_weather_df():\n    history = weather_history.get()\n    # Get most recent entry for each city\n    if history:\n        df = pd.DataFrame(history)\n        return df.sort_values('timestamp').groupby('city').last().reset_index()\n    return pd.DataFrame()\n\n@reactive.calc\ndef history_df():\n    return pd.DataFrame(filtered_history())\n\n@reactive.calc\ndef focused_city_df():\n    df = history_df()\n    if not df.empty:\n        return df[df['city'] == input.selected_city()]\n    return pd.DataFrame()\n\n# Loading spinner\n@render.ui\ndef loading_spinner():\n    if not weather_history.get():\n        return ui.tags.div(\n            ui.tags.span(class_=\"spinner-border spinner-border-sm\"),\n            \"Loading Texas weather data...\",\n            class_=\"text-center my-5\"\n        )\n\n# Main layout\n# Main layout\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h2(\"Current Weather - All Texas Cities\")\n        @render.data_frame\n        def current_weather():\n            return express.render.DataTable(current_weather_df())\n\n    with ui.card(full_screen=True):\n        @render.ui\n        def weather_history_header():\n            return ui.h2(f\"Weather History - {input.selected_city()}\")\n        \n        @render.data_frame\n        def weather_history_table():\n            return express.render.DataGrid(focused_city_df())\n\n# Visualization cards with full reactivity\nwith express.ui.layout_columns():\n    @render_plotly\n    def weather_trend():\n        df = focused_city_df()\n        selected_metric = input.selected_metric()\n        \n        if df.empty:\n            return px.scatter(title=\"No data available\").update_layout(showlegend=False)\n        \n        return px.line(\n            df,\n            x=\"timestamp\",\n            y=selected_metric,\n            color=\"city\",\n            title=f\"Texas Cities: {METRIC_LABELS[selected_metric]} Trend\",\n            labels={\n                \"timestamp\": \"Time\",\n                selected_metric: METRIC_LABELS[selected_metric]\n            }\n        ).update_traces(mode=\"lines+markers\")\n\n    @render.ui\n    def weather_conditions():\n        df = focused_city_df()\n        selected_metric = input.selected_metric()\n        \n        if df.empty:\n            return ui.tags.div(\"No data available\", class_=\"text-muted\")\n        \n        current = df.iloc[-1]\n        metric_config = {\n            \"temperature\": {\n                \"title\": f\"Temperature in {current['city']}\",\n                \"value\": f\"{current['temperature']}\u00b0C\",\n                \"icon\": \"bi-thermometer\",\n                \"theme\": \"primary\"\n            },\n            \"humidity\": {\n                \"title\": f\"Humidity in {current['city']}\",\n                \"value\": f\"{current['humidity']}%\",\n                \"icon\": \"bi-droplet\",\n                \"theme\": \"info\"\n            },\n            \"pressure\": {\n                \"title\": f\"Pressure in {current['city']}\",\n                \"value\": f\"{current['pressure']} hPa\",\n                \"icon\": \"bi-speedometer2\",\n                \"theme\": \"warning\"\n            },\n            \"wind_speed\": {\n                \"title\": f\"Wind Speed in {current['city']}\",\n                \"value\": f\"{current['wind_speed']} m/s\",\n                \"icon\": \"bi-wind\",\n                \"theme\": \"success\"\n            }\n        }\n        \n        config = metric_config.get(selected_metric, {\n            \"title\": selected_metric.capitalize(),\n            \"value\": str(current.get(selected_metric, \"N/A\")),\n            \"icon\": \"bi-question-circle\",\n            \"theme\": \"secondary\"\n        })\n        \n        return ui.value_box(\n            title=config[\"title\"],\n            value=config[\"value\"],\n            showcase=ui.tags.i(class_=f\"bi {config['icon']}\"),\n            theme=config[\"theme\"],\n            full_screen=True\n        )\n\nwith express.ui.card(full_screen=True):\n    express.ui.card_header(\"Texas Cities: Metrics Correlation\")\n    @render_plotly\n    def weather_correlation():\n        df = focused_city_df()\n        selected_metric = input.selected_metric()\n        \n        if df.empty:\n            return px.scatter(title=\"No data available\").update_layout(showlegend=False)\n        \n        return px.scatter_matrix(\n            df,\n            dimensions=list(METRIC_LABELS.keys()),\n            color=\"city\",\n            title=\"Texas Cities: Metrics Correlation\",\n            labels=METRIC_LABELS\n        )\n\n# Update available metrics based on data\n@reactive.Effect\ndef update_metric_filter():\n    df = history_df()\n    if not df.empty:\n        available_metrics = [col for col in METRIC_LABELS.keys() if col in df.columns]\n        express.ui.update_selectize(\"selected_metric\", choices=available_metrics)", "type": "text"}]